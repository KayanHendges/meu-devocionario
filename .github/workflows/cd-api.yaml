name: CD API

on:
  push:
    branches:
      - test
    paths:
      - "apps/api/**"
      - "packages/project-types/**"
      - ".github/workflows/cd-api.yaml"
      - ".dockerignore"

  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: Production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Creating env file
        working-directory: apps/api
        run: |
          echo "ENVIRONMENT=production" >> .env
          echo "SERVER_PORT=3333" >> .env
          echo "MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}" >> .env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
          echo "MONGODB_AUTH_SOURCE=${{ secrets.MONGODB_AUTH_SOURCE }}" >> .env
          echo "MONGODB_HOST=${{ secrets.MONGODB_HOST }}" >> .env
          echo "MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> .env
          echo "MONGODB_SRV=true" >> .env

      - name: Creating meu-devocionario.pem
        working-directory: apps/api
        run: echo "${{ secrets.SSH_KEY }}" >> meu-devocionario.pem

      - name: chmod 400 apps/api/meu-devocionario.pem
        run: chmod 400 apps/api/meu-devocionario.pem

      - name: Deploy
        working-directory: apps/api
        env:
          SSH_ADDRESS: ${{ secrets.SERVER_ADDRESS  }}
        run: |
          rsync -av -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i meu-devocionario.pem -p 22" .env $SSH_ADDRESS:/applications/api/
          rsync -av -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i meu-devocionario.pem -p 22" docker-compose.yml $SSH_ADDRESS:/applications/api/

      - name: Building container on server
        uses: appleboy/ssh-action@master
        env:
          ECR_USERNAME: ${{ needs.setup-aws.outputs.ecr_username }}
          ECR_PASSWORD: ${{ needs.setup-aws.outputs.ecr_password }}
          ECR_REGISTRY: ${{ steps.get-ecr-registry.outputs.registry }}
        with:
          debug: true
          host: ${{ secrets.SERVER_ADDRESS }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          envs: ECR_USERNAME,ECR_PASSWORD,ECR_REGISTRY
          script: |
            set -e
            cd /applications/backend
            echo $ECR_PASSWORD | docker login -u $ECR_USERNAME --password-stdin $ECR_REGISTRY
            docker compose pull
            docker compose down
            docker compose up -d
            docker system prune -f
            docker logout $ECR_REGISTRY
