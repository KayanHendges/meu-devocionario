name: CD API

on:
  push:
    branches:
      - main

  workflow_dispatch: {}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_ECS_REGION }}
      ECR_REPOSITORY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/meu-devocionario
      ECS_SERVICE: meu-devocionario-service
      ECS_CLUSTER: meu-devocionario-api
      ECS_TASK_DEFINITION: "./infra/api-task-definition.json"
      CONTAINER_NAME: meu-devocionario-api
    environment: prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/meu-devocionario-ci-cd
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/meu-devocionario
          environment-variables: |
            ENVIRONMENT=production
            SERVER_PORT=3333
            MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}
            MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
            MONGODB_AUTH_SOURCE=${{ secrets.MONGODB_AUTH_SOURCE }}
            MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}
            MONGODB_HOST=${{ secrets.MONGODB_HOST }}
            MONGODB_SRV=${{ secrets.MONGODB_SRV }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
